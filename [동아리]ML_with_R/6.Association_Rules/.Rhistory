data<-factor('a','b','c')
data
data<-factor('a',c('a','b'))
data
x<-list(name='a',foo='b')
x
x <- array( 1:12, dim(2,2,3) )
x<-array(1:12,dim=c(2,3,4)))
x<-array(1:12,dim=c(2,3,4))
,,1
, , 1
1
, , 1
,,1
(x<-array(1:12,dim=c(2,3,4)))
x[,,3]
q()
nreps <- 1--
da
fweq
nreps <- 100
l1 <- numeric(nreps)
u1 <- numeric(nreps)
n <- 100
mu <0 500
mu <- 500
sigma <- 100
for *i in 1 nreps) {}
for (i in 1 nreps) {}
for (i in 1 nreps) {
X1 <- 3
X2 = 6
8 -> X3
assign('X4',24)
Y1 <- (X1+X2)*X3-X4
Y1 > 50
Y2 <- ((X4-X2)/X1)**(X3/4)
Y2 > 50
Y1==Y2
remove('Y1','Y2')
rm(list=ls())
############
mode(pi)
Y3 <- as.character(pi)
is.character(Y3)
as.numeric(TRUE)
as.numeric(FALSE)
as.logical(0)
as.logical(1)
as.logical(-1)
as.logical(5)
as.logical(-5)
paste(month.name,month.abb,sep=' -> ')
paste('September',1:30,sep=' ')
paste('Lower case : ',letters,' / Upper case : ',LETTERS,sep=' ')
save.image("C:\\Users\\samsung\\Desktop\\daf.pdf")
X1 <- 3
X2 = 6
8 -> X3
assign('X4',24)
Y1 <- (X1+X2)*X3-X4
Y1 > 50
Y2 <- ((X4-X2)/X1)**(X3/4)
Y2 > 50
Y1==Y2
remove('Y1','Y2')
rm(list=ls())
############
mode(pi)
Y3 <- as.character(pi)
is.character(Y3)
as.numeric(TRUE)
as.numeric(FALSE)
as.logical(0)
as.logical(1)
as.logical(-1)
as.logical(5)
as.logical(-5)
paste(month.name,month.abb,sep=' -> ')
paste('September',1:30,sep=' ')
paste('Lower case : ',letters,' / Upper case : ',LETTERS,sep=' ')
X1 <- 3
X2 = 6
8 -> X3
assign('X4',24)
Y1 <- (X1+X2)*X3-X4
Y1 > 50
Y2 <- ((X4-X2)/X1)**(X3/4)
Y2 > 50
Y1==Y2
remove('Y1','Y2')
rm(list=ls())
############
mode(pi)
Y3 <- as.character(pi)
is.character(Y3)
as.numeric(TRUE)
as.numeric(FALSE)
as.logical(0)
as.logical(1)
as.logical(-1)
as.logical(5)
as.logical(-5)
paste(month.name,month.abb,sep=' -> ')
paste('September',1:30,sep=' ')
paste('Lower case : ',letters,' / Upper case : ',LETTERS,sep=' ')
q()
library(Epub)
head(Epub)
read.transactions(Epub)
a <- read.transactions(Epub)
data(Epub)
data(iris)
data(epub)
install.packages("epubr")
library(epubr)
data(epub)
data(epub)
data(epubr)
epub
a <- read.transactions(epubr)
head(epub)
inspect(epub[1:10])
epub[1:10]
setwd("C:\\Users\\samsung\\Desktop\\Bitamin\\Machine Learning with R\\8장")
# 파일 불러오고 요약하기
library(arules)
groceries <- read.transactions("groceries.csv",sep=",")
summary(groceries)
# 자세히 들여다보기
inspect(groceries[1:5])
# 자세히 들여다보기
inspect(groceries[1:5])
library(arules)
insepct(epub[1:10])
inspect(epub[1:10])
inspect(epubr[1:10])
inspect(epub[1:10])
itemFrequencty(epub)
itemFrequency(epub)
library(arules)
a<-itemFrequency(epub)
inspect(epub[,1:10])
a<-itemFrequency(epub[,1:10])
a<-itemFrequency(epub[,1:10])
summary(epub)
summary(epub)
summary(epub)
insepct(epub)
inspect(epub)
library(arules)
library(epubr)
inspect(epub)
itemFrequency(epub)
str(titanic)
data(Titanic)
titan.df <- as.data.frame(Titanic)
head(titan.df)
str(titan.df)
titanic <- NULL
for(i in 1:4){
titanic <- cbind(titanic,
rep(as.character(titan.df[,i]), titan.df$Freq))
}
titanic <- as.data.frame(titanic)
names(titanic) <- names(titan.df)[1:4]
str(titanic)
inspect(titanic[1:5])
inspect(titanic[,1:5])
inspect(titanic[,1:3])
inspect(titanic[1:3])
itemFrequencyPlot(titanic,support=0.1)
a <- as(titanic,"transactions")
####################################3
titanic <- as(titanic,"transactions")
tit.freq <- itemFrequency(titanic)
tit.rule <- apriori(titanic)
####################################3
titanic <- as(titanic,"transactions")
tit.rule <- apriori(titanic)
tit.rule3 <- sort(tit.rule,by="lift")
inspect(tit.rule3[1:3])
apriori(titanic,appearance = list(rhs = c("Survived = No", "Survived=Yes"), default = "lhs))
new.rule <- apriori(titanic,appearance = list(rhs = c("Survived = No", "Survived=Yes"), default = "lhs)))
new.rule <- apriori(titanic, appearance = list(rhs = c("Survived = No", "Survived=Yes"), default = "lhs))
d
fasd
new.rule <- apriori(titanic, appearance = list(rhs = c("Survived = No", "Survived=Yes"), default = "lhs"))
new.rule <- apriori(titanic, appearance = list(rhs = c("Survived = No", "Survived=Yes"), default = lhs))
new.rule <- apriori(titanic, appearance = list(rhs = c("Survived = No", "Survived=Yes"), default = "lhs"))
new.rule <- apriori(titanic, appearance = list(rhs = c("Survived = No", "Survived=Yes"), default = "lhs))
new.rule <- apriori(titanic, appearance = list(rhs = c("Survived = No", "Survived=Yes"), default = "lhs))
new.rule <- apriori(titanic, appearance = list(rhs = c("Survived = No", "Survived=Yes"), default = "lhs"))
new.rule <- apriori(titanic, parameter=list(support=0.005,confidence=0.8,length=2), appearance = list(rhs = c("Survived = No", "Survived=Yes"), default = "lhs"))
new.rule <- apriori(titanic, parameter=list(support=0.005,confidence=0.8,length=2), appearance = list(rhs = c("Survived=No", "Survived=Yes"), default = "lhs"))
new.rule <- apriori(titanic, parameter=list(support=0.005,confidence=0.8), appearance = list(rhs = c("Survived=No", "Survived=Yes"), default = "lhs"))
new.rule <- apriori(titanic, parameter=list(support=0.005,confidence=0.8), appearance = list(rhs = c("Survived=No", "Survived=Yes"), default = "lhs"))
new.rule <- apriori(titanic, parameter=list(support=0.005,confidence=0.8,minlen=2), appearance = list(rhs = c("Survived=No", "Survived=Yes"), default = "lhs"))
new.liftrule <-sort(new.rule,by="lift")
new.liftrule
inspect(new.liftrule[1:3])
str(titanic)
data(Titanic)
titan.df <- as.data.frame(Titanic)
head(titan.df)
str(titan.df)
titanic <- NULL
for(i in 1:4){
titanic <- cbind(titanic,
rep(as.character(titan.df[,i]), titan.df$Freq))
}
titanic <- as.data.frame(titanic)
names(titanic) <- names(titan.df)[1:4]
str(titanic)
titanic <- as(titanic,"transactions")
tit.rule <- apriori(titanic)
tit.liftrule <- sort(tit.rule,by="lift")
inspect(tit.rule3[1:3])
new.rule <- apriori(titanic, parameter=list(support=0.005,confidence=0.8,minlen=2), appearance = list(rhs = c("Survived=No", "Survived=Yes"), default = "lhs"))
new.liftrule <-sort(new.rule,by="lift")
inspect(new.liftrule[1:3])
subset.matrix <- is.subset(new.liftrule,new.liftrule)
subset.matrix[lower.tri(subset.matrix,diag=T)]<-NA
subset.matrix <- is.subset(new.liftrule,new.liftrule)
subset.matrix
subset.matrix[lower.tri(subset.matrix,diag=T)]<-NA
redundant <- colSums(subset.marix,na.rm=T)
redundant <- colSums(subset.matrix,na.rm=T)
redundant <- colSums(subset.matrix,na.rm=T) >= 1
which(redundant)
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
library(arulesViz)
install.packages("arulesViz")
library(arulesViz)
plot(new.rule.pruned)
plot(new.rule.pruned,shading="order")
redundant <- colSums(subset.matrix,na.rm=T) > 1
new.rule.pruned <- new.liftrule[!redundant]
install.packages("arulesViz")
redundant <- colSums(subset.matrix,na.rm=T) > 1
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
install.packages("arulesViz")
library(arulesViz)
plot(new.rule.pruned,shading="order")
subset.matrix <- is.subset(new.liftrule,new.liftrule)
subset.matrix[lower.tri(subset.matrix,diag=T)]<-NA
redundant <- colSums(subset.matrix,na.rm=T) >= 1
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
library(arulesViz)
plot(new.rule.pruned,shading="order")
redundant <- colSums(subset.matrix,na.rm=T) >= 3
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
plot(new.rule.pruned,shading="order")
redundant <- colSums(subset.matrix,na.rm=T) >= 10
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
plot(new.rule.pruned,shading="order")
plot(new.rule.pruned,shading="order")
plot(new.rule.pruned,shading="order",method = “graph”, control = list(type = “itemsets”))
plot(new.rule.pruned,shading="order",method = “graph”, control = list(type = “itemsets”)
plot(new.rule.pruned,shading="order",interactive=T)
data(Titanic)
titan.df <- as.data.frame(Titanic)
head(titan.df)
str(titan.df)
titanic <- NULL
for(i in 1:4){
titanic <- cbind(titanic,
rep(as.character(titan.df[,i]), titan.df$Freq))
}
titanic <- as.data.frame(titanic)
names(titanic) <- names(titan.df)[1:4]
str(titanic)
####################################3
titanic <- as(titanic,"transactions")
tit.rule <- apriori(titanic)
tit.liftrule <- sort(tit.rule,by="lift")
inspect(tit.rule3[1:3])
new.rule <- apriori(titanic, parameter=list(support=0.005,confidence=0.8,minlen=2), appearance = list(rhs = c("Survived=No", "Survived=Yes"), default = "lhs"))
new.liftrule <-sort(new.rule,by="lift")
inspect(new.liftrule[1:3])
subset.matrix <- is.subset(new.liftrule,new.liftrule)
subset.matrix[lower.tri(subset.matrix,diag=T)]<-NA
redundant <- colSums(subset.matrix,na.rm=T) >= 1
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
plot(new.rule.pruned,shading="order")
library(arulesViz)
subset.matrix <- is.subset(new.liftrule,new.liftrule)
subset.matrix[lower.tri(subset.matrix,diag=T)]<-NA
redundant <- colSums(subset.matrix,na.rm=T) >= 1
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
library(arulesViz)
plot(new.rule.pruned,shading="order")
subset.matrix <- is.subset(new.liftrule,
new.liftrule)
subset.matrix[lower.tri(subset.matrix,diag=T)]<-NA
redundant <- colSums(subset.matrix,na.rm=T) >= 1
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
subset.matrix <- as.matrix(new.liftrule,
new.liftrule)
as.matrix(subset.matrix)
subset.matrix <- is.subset(new.liftrule,
new.liftrule)
as.matrix(subset.matrix)
subset.matrix[lower.tri(subset.matrix,diag=T)]<-NA
sub <- as.matrix(subset.matrix)
sub[lower.tri(subset.matrix,diag=T)]<-NA
subset.matrix <- is.subset(new.liftrule,
new.liftrule)
subset.matrix2 <- as.matrix(subset.matrix)
subset.matrix2[lower.tri(subset.matrix,diag=T)]<-NA
redundant <- colSums(subset.matrix,na.rm=T) >= 1
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
plot(new.rule.pruned,shading="order")
subset.matrix2[lower.tri(subset.matrix2,diag=T)]<-NA
redundant <- colSums(subset.matrix2,na.rm=T) >= 1
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
library(arulesViz)
plot(new.rule.pruned,shading="order")
plot(new.rule.pruned,shading="order",method="grouped")
plot(new.rule.pruned,method="grouped")
plot(new.rule.pruned,shading="order")
plot(new.rule.pruned,shading="order",method="grouped")
plot(new.rule.pruned,shading="order",method = “graph”, control = list(type = “itemsets”))
data(Epub)
str(Epub)
library(arules)
itemFrequency(Epub)[1:10]
freq.book <- itemFrequency(Epub)
freq.book[which(freq.book==max(freq.book))]
itemFrequencyPlot(Epub,support=0.01)
rule <- apriori(Epub,parameter=list(support=0.001,confidence=0.2,minlen=2))
sort.rule <- sort(rule,by="lift")
sort.rule[1]
inspect(sort.rule[1])
doc.rule <- subset(rule, items %in% c("doc_6e7","doc_6e8","doc_6e9"))
doc.rule <- subset(rule, lhs %in% "doc_87c")
doc.rule <- subset(rule, items %in% "60e", confidence %pin% 0.25)
doc.rule <- subset(rule, items %in% "60e")
doc.rule <- subset(rule, items %pin% "60e")
doc.rule <- subset(rule2, items %pin% "60e", confidence=0.25)
doc.rule <- subset(rule, items %pin% "60e", confidence=0.25)
plot(doc.rule[1:20],method)="grouped")
plot(doc.rule[1:20],method="grouped")
plot(doc.rule,method="grouped")
doc.rule[2]
doc.rule[20]
doc.rule
inspect(sort.rule[1])
plot(sort.rule, method="grouped")
plot(sort.rule[1:20], method="grouped")
plot(sort.rule,method="graph", control = list(type = “itemsets”))
plot(sort.rule,method="graph", control = “itemsets”)
plot(sort.rule,method="graph")
plot(sort.rule,method="graph", control=list(type="itemsets")
, control = list(type = “itemsets”))
plot(sort.rule,method="graph", control=list(type="itemsets")
plot(sort.rule,method="graph", control=list(type="itemsets")
)
plot(sort.rule,method="graph", control=list(type="itemsets"))
write.csv(sort.rule,file="bitamin.csv",sep=",",quote=TRUE,rownames=FALSE)
write.csv(sort.rule,file="bitamin.csv",quote=TRUE,rownames=FALSE)
write(sort.rule,file="bitamin.csv",sep=",",quote=TRUE,rownames=FALSE)
write(sort.rule,file="bitamin.csv",sep=",",quote=TRUE,row.names=FALSE)
library(arules)
data(Epub)
itemFrequency(Epub)[10]
itemFrequencyPlot(Epub,support=0.01)
itemFrequencyPlot(Epub,topN=30)
image(sample(Epub,500))
rule <- apriori(Epub,parameter=list(support=0.001,confidence=0.2,minlen=2))
sort.rule <- sort(rule,by="lift")
inspect(sort.rule[1])
doc.rule <- subset(rule, items %in% c("doc_6e7","doc_6e8","doc_6e9"))
doc.rule <- subset(rule, lhs %in% "doc_87c")
doc.rule <- subset(rule, items %pin% "60e", confidence=0.25)
plot(sort.rule[1:20], method="grouped")
plot(sort.rule,method="graph", control=list(type="itemsets"))
plot(sort.rule[1:20], method="grouped")
####################################3
titanic <- as(titanic,"transactions")
tit.rule <- apriori(titanic)
tit.liftrule <- sort(tit.rule,by="lift")
inspect(tit.rule3[1:3])
new.rule <- apriori(titanic, parameter=list(support=0.005,confidence=0.8,minlen=2), appearance = list(rhs = c("Survived=No", "Survived=Yes"), default = "lhs"))
new.liftrule <-sort(new.rule,by="lift")
inspect(new.liftrule[1:3])
subset.matrix <- is.subset(new.liftrule,
new.liftrule)
subset.matrix2 <- as.matrix(subset.matrix)
subset.matrix2[lower.tri(subset.matrix2,diag=T)]<-NA
redundant <- colSums(subset.matrix2,na.rm=T) >= 1
new.rule.pruned <- new.liftrule[!redundant]
inspect(new.rule.pruned)
plot(new.rule.pruned,shading="order")
plot(new.rule.pruned,method="grouped")
plot(new.rule.pruned,shading="order",method = “graph”, control = list(type = “itemsets”))
plot(new.rule.pruned,shading="order",method = “graph”, control=list(type="itemsets"))
plot(new.rule.pruned,method = “graph”, control=list(type="itemsets"))
plot(new.rule.pruned,method="graph", control=list(type="itemsets"))
plot(new.rule.pruned,smethod="paracord")
plot(new.rule.pruned,method="paracord")
plot(new.rule.pruned,method="paracord")
plot(new.rule.pruned,method="paracoord")
plot(new.rule.pruned,interactive=T)
