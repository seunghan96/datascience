Y
is.matrix(X)
is.matrix(Y)
# 7-2. Creating List
# 다른 종류의 데이터여도 가능
# 양식) list(name1=object1, name2=object2....)
# ex)
A <- list(name=c('Lee','Park'),age=c(20,21),hair=c('long','short'))
A
B <- list(num=c(1,2,3),'Nick',matrix(1:12,3))
B
C <- list(num=c(3,5),identity=diag(3))
C
D <- list(10,'hi',TRUE)
D
# 7-3. Attributes of List
mode(A) # 항상 list
length(A) # 3개
names(A)
names(A) <- c('a','b','c')
A
# 7-4. Subsetting
F <- list(c(1,5,3),matrix(1:6,3),c('a','b','c'))
F
F[[1]]
F[[2]][2,1]
F[[2]][2] <- 'world'
F[[2]]
F[c(1,3)]
F[4] <- list(matrix=diag(2)) # 새로만들기
F[4]
names(F) <-c('q','w','e','r')
F
F$q
F$w[2,1]
F$e[c(1,2)]
# 7-6. Testing
mat1 <- matrix(1:4,2)
mat1
is.list(mat1)
as.list(mat1)
is.list(mat1)
# 7-6. Testing
mat1 <- matrix(1:4,2)
mat1
is.list(mat1)
as.list(mat1)
is.list(mat1)
# 8-2. Creating DF
# 양식 : data.frame(name1=object1, name2=object2, namem=objectm)
# ex)
group <- data.frame(name=c("Hans","Caro","Lars","Ines","Samira","Peter","Sarah"), gender=c("M","F","M","F","F","M","F"), favorite_col=c("green","blue","yellow","black","yellow","green","black"), income=c(800,1233,2400,4000,2899,1100,1900))
group
ctmr <- data.frame(no=1:5, name=c("Lee","Park","So","Kim","Yoon"), age=c(55,47,35,26,29), sex=c("M","F","M","F","M"))
ctmr
ctmr <- data.frame(no=1:5, name=c("Lee","Park","So","Kim","Yoon"), age=c(55,47,35,26,29), sex=c("M","F","M","F","M"))
ctmr
# 8-3. Attributes of DF
# mode / length / names / dimnames / rownames / colnames / str / summary
mode(group)
length(group) # 열의 개수
names(group) # 열 이름
rownames(group) # 행 이름
dimnames(ctmr) # 행&열 이름
rownames(ctmr) # 행 이름
colnames(ctmr) # 열 이름 ( = names(ctmr))
str(group) # 구조 파악
summary(group) # 요약
str(ctmr)
summary(ctmr)
# 8-4. Subsetting DF
# [] / [[]] / $
# 양식 : subset(DF,subset=expression1,select=expression2)
# subset argument -> rows 정하기
# select argument -> columns 정하기
# ex)
ctmr[2,2] # 2행 2열
ctmr[,-1] # 1열 제외
ctmr[c(T,F,T,F,T),] # 1,3,5행
group$income # income열 가져오기
group$gender[2] # gender열의 2번째 행
group[,"income"] # income열 가져오기
ctmr[[1]][2] # 1열 2행
ctmr[ctmr$name=="Lee",] # name열이 Lee인 모든 행
ctmr$age # age열
subset(group,subset=c(T,F,F,F,F,F,T)) # [subset] 1&7행 불러오기
subset(group,subset=c(T,F,F,F,F,F,T)) # [subset] 1&7행 불러오기
subset(group,subset=(favorite_col=="yellow")) # [subset] favorite_col열이 yellow인 모든 행
subset(group,subset=gender=='F') # [subset] gender열이 F인 모든 행
subset(group,select=c(2,4)) # 2&4열 불러오기
subset(group,select=-3) # 3열 제외 불러오기
subset(group,favorite_col=="yellow",-3) # favorite_col열이 'yellow'면서, 3열 제외 불러오기
# 8-5. Useful Functions Utilizing DF
# cbind/rbind/merge
# 양식 : merge(DF1,DF2,by.x=column1, by.y=column2)
#	  merge(DF1,DF2,all.x=log1, all.y=log2)
#	  split(DF,factor)
#	  order(seq.of.vectors, decreasing=TRUE)
# ex)
name
gender
attach(group)
name
gender
detach(group)
name
gender
dat1 <- data.frame(var1=1:4,var2=letters[1:4],var3=LETTERS[1:4])
cbind(dat1, 11:14)
df1 <- data.frame(name=c('LEE','PARK','SO','KIM','YOON'), age=c(55,47,35,26,29), sex=c('M','F','M','F','M'))
df2 <- data.frame(name=c('KIM','SO','LEE','YOON','PARK'), married=c(F,T,T,F,T))
df3 <- data.frame(surname=c('KIM','SO','LEE','YOON','PARK'), married=c(F,T,T,F,T))
df3 <- data.frame(surname=c('KIM','SO','LEE','YOON','PARK'), married=c(F,T,T,F,T))
df4 <- data.frame(name=c('LEE','PARK','SO','KIM','YOON'), sex=c('M','M','F','F','M'), married=c(T,T,F,T,F))
df1
df2
df1
df2
df3
df4
merge(df1,df2) # 겹치는건 한번만 # merge는 순서 뒤바뀌어있어도 알아서 해줌ㅎㅎ
merge(df1,df2,by=1) # 1열을 기준으로 묶기
merge(df1,df2,by="name") # "name"열을 기준으로 묶기
merge(df1,df2,by="row.names") #"row.names"라는 새로운 열 만들고 묶기
merge(df1,df3,by.x="name",by.y="surname") # df1의 name열과, df3의 surname열이 일치하는 것으로
merge(df1,df4)
merge(df1,df4)
merge(df1,df4,all.x=T) # df2에 없는 데이터라도, df1에 있는 사람은 모두 불러오기
merge(df1,df4,all.y=T) # df1			  df2
split(df1,df1$sex) # df1$sex에 따라, df1을 구분
order(df1$age) # 나이 등수 메기기
df1[order(df1$age),] # 나이 (오름차순)으로 df1 정리
install.packages("vcd")
library(caret)
library(gmodels)
library(ROCR)
library(C50)
library(irr)
install.packages("irr")
# 11-1-1.
set.seed(123)
sample(1:5,3)
sample(1:5,3,replace=TRUE)
sample(1:5,3,prob=c(0.1,0.1,0.1,0.1,0.6))
# 정규분포 ( Normal Dist )
rnorm(5,0,1)     # N(0,1)에서 5개
dnorm(1.96,0,1)  # N(0,1)에서 1.96 알파값 ( 답 : 0.05 )
pnorm(1.96,0,1)  # N(0,1)에서 1.96 왼쪽 ( 답 : 0.975 )
qnorm(0.975,0,1) # N(0,1)에서 97.5%인 Z값 ( 답 : 1.96 )
pnorm(5,3,2)     # N(3,2) / X=5 / 왼쪽 넓이 %는? ( 답 : 84% )
pnorm(5,3,2,lower.tail=FALSE) #	  오른쪽	 ( 답 : 16% )
qnorm(0.3,3,2)   # N(3,2) / 30% / X값은? ( 답 : 1.95 )
qnorm(0.3,3,2)   # N(3,2) / 30% / X값은? ( 답 : 1.95 )
# 정규분포 ( Normal Dist )
rnorm(5,0,1)     # N(0,1)에서 5개
dnorm(1.96,0,1)  # N(0,1)에서 1.96 알파값 ( 답 : 0.05 )
pnorm(1.96,0,1)  # N(0,1)에서 1.96 왼쪽 ( 답 : 0.975 )
qnorm(0.975,0,1) # N(0,1)에서 97.5%인 Z값 ( 답 : 1.96 )
pnorm(5,3,2)     # N(3,2)에서 5 왼쪽 ( 답 : 0.84 )
pnorm(5,3,2,lower.tail=FALSE) #	  오른쪽	 ( 답 : 0.16 )
qnorm(0.3,3,2)   # N(3,2)에서 30%인 Z값 ( 답 : 1.95 )
qnorm(0.3,3,2,lower.tail=FALSE) # N(3,2)에서 30%인 Z값 / 1-30% / X값은? ( 답 : 4.04 )
# 이항분포 ( Binomial Dist )
rbinom(5,2,0.5) # 5개 / n=2, p=0.5
dbinom(2,3,0.6) # 이항분포의 확률값 -> 동전 3번 던져서 앞면 2번 나올 확률 ( 앞면 확률 0.6 )
pbinom(2,3,0.6) # 이항분포의 누적확률값 -> 동전 3번 던져서 앞면 2번"이하" 나올확률 ( 앞면 확률 0.6 )
# 이항분포 ( Binomial Dist )
rbinom(5,2,0.5) # 5개 / n=2, p=0.5
pbinom(2,3,0.6) # 이항분포의 누적확률값 -> 2개 "이하" 나올 확률 / n=3, p=0.6
# 11-2.
x <- (1:4+3)/2
x
x <- "A"
y <- "B"
{ x <- "A" ; y <- "B" } # 이렇게 한번에 지정해도 됨
gr <- { x1 <-1:4
y1 <-3
z1 <- x1+y1 }
gr 		# 답 : 4,5,6,7 ( 마지막 원소인 z1값을 반환 )
gr <- { x1 <-1:4 ; y1 <-3 ; z1 <-x1+x2 } # 이것도 OK
gr2 <- { x2 <- "a" ; y2 <- "b" }
gr2  		# 답 : b
# 11-3-1. Conditional
x <- 1:5
y <- -2:2
if(any(x<0)) print(x)        # 0보다 작은 x있으면 x출력
if(any(y<0)) print(abs(y))   # 0보다 작은 y있으면 |y}출력
if(any(y<0)){
print(abs(y))
print('y contains negative value')
}
if(pi>3) print('A') else print('B')
if(length(x)==5) {
if(sum(x)==15) print('길이는 5, 합은 15')
} else {
print('길이는 5가 아님')
}
if(any(y<0)){
print(abs(y))
print('y contains negative value')
}
if(pi>3) print('A') else print('B')
if(length(x)==5) {
if(sum(x)==16) print('길이는 5, 합은 15')
} else {
print('길이는 5가 아님')
}
if(sum(x)==15) print('길이는 5, 합은 15')
if(length(x)==5 && sum(x)==15) {
print('길이는 5, 합은 15')
} else {
print('길이는 5가 아님')
}
if(length(x)==5 & sum(x)==15) {
print('길이는 5, 합은 15')
} else {
print('길이는 5가 아님')
}
exam <- 90
{if(exam>=80) grade <-"A"
else if (exam>=70) grade <- "B"
else if (exam>=60) grade <- "C"
else if (exam>=50) grade <- "D"
else grade <- "F"
}
grade
y <- -2:2
ifelse(y>=0,y,-y) # 조건,O,X
abs(y)		  # 같음
tmp <- 3
ifelse(tmp>0, '양수', ifelse(tmp<0, '음수','0'))
# 11-3-2. Loops
# (1) for (2) while (3) repeat/break/next
for (i in 5:1) print(rep(i,i))
sum.x <- 0
for(i in 1:10) {
sum.x <- sum.x+i
}
sum.x
for(i in 2:9){
for(j in 1:9){
cat(i,'*',j,i*j,'\n')
}
}			# 구구단
i <- 10
f <- 1
while(i>1) {
f <- i*f
i <- i-1
print(c(i,f))
}			# 마지막 값의 2번째 원소는 factorial(10)
while(i>1) {
f <- i*f
i <- i-1
print(c(i,f))
}			# 마지막 값의 2번째 원소는 factorial(10)
y <- 1
j <- 1
while(y<12 & j<8) {
y <- y*2
j <- j+1
}
y  # 16
j  # 5
a <- 0
while(a!=5) {
a <- sample(1:10,1)
print(a)
} 	# a가 5 나올때까지 계속 random
i <- 10
f <- 1
repeat {
f<-i*f
i<-i-1
if(i<1) break
}
f
factorial(10) # 같음
z <- 3
repeat {
z <- z^2
if(z>100) {break}
print(z)
}
z 	      # 81의 제곱 ( 3->9->81->6561 )
sum.x <- 0
for(i in 1:10) {
sum.x <- sum.x+i
if(sum.x>20) break
cat(i,sum.x,'\n')
}		# 1, 1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5
cat(i,sum.x)
sum.x <- 0
for(i in 1:10) {
sum.x <- sum.x+i
if(sum.x>20) break
cat(i,sum.x,'\n')
}		# 1, 1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5
sum.x <- 0
for(i in 1:10) {
sum.x <- sum.x+i
if(sum.x>20) break
cat(i,sum.x,'\n')
}		# 1, 1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5
z <- 3
repeat {
z <- z^2
if(z>100) {break}
print(z)
}
z 	      # 81의 제곱 ( 3->9->81->6561 )
sum.x <- 0
for(i in 1:10) {
sum.x <- sum.x+i
if(sum.x>20) break
cat(i,sum.x,'\n')
}		# 1, 1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5
for(i in 2:9) {
if(i>5) break
for(j in 1:9){
if(j>1) break
cat(i,'*',j,'=',i*j,'\n')
}
}
money <- c()
for ( i in 1:10) {
product <- sample(1:3, 50, replace=T)
prod.table[i,] <- table(product)
money[i] <- prod.table[i,] %*% as.matrix(c(100,350,400))
}
prod.table <- matrix(0,10,3) #data는 0, 10행 3열
colnames(prod.table) <- c('candy','coffee','milk')
rownames(prod.table) <- paste('day',1:10,sep='')
money <- c()
for ( i in 1:10) {
product <- sample(1:3, 50, replace=T)
prod.table[i,] <- table(product)
money[i] <- prod.table[i,] %*% as.matrix(c(100,350,400))
}
prod.mean <- apply(prod.table,2,mean)
prod.table
prod.mean  # 음식 별 개수
mean(money)  # 평균 비용
# 11-4-1. Function
my.mean <- function(data) sum(data)/length(data)
my.mean(1:10)
mean(1:10)
square <- function(x) x^2
square(100)	  # 5.5
square(1:10)	  # 5.5
sumsq <- function(x) sum(square(x))
sumsq(1:10)   # 10000
sumsq <- function(x) sum(square(x-mean(x)))
sumsq(1:10)   # 1 4 9 16 ... 100
sumsq <- function(x) sum(square(x-mean(x)))
sumsq(1:10)   # 1 4 9 16 ... 100
my.sd <- function(data) {
data.var <- sum((data-my.mean(data))^2) / (length(data)-1)
data.sd <- sqrt(data.var)
return(data.sd)
}
my.sd <- function(data) {
data.var <- sum((data-my.mean(data))^2) / (length(data)-1)
data.sd <- sqrt(data.var)
return(data.sd)
}
my.sd(1:5)	# 1.58xx
sd(1:5)		# 1.58xx
fact <- function(n) {
f <- 1
for (i in 1:n) { f<-f*i }
f
}
fact(5) 	# 120
printfunc <- function(x,y) {
print(x)
g <- function(y) {
print(y)
}
g(y)
}
printfunc("a",3)  # "a", 3
printfunc <- function(x,y) {
print(x)
g <- function(y) {
print(y)
}
g(y)
}
printfunc("a",3)  # "a", 3
# 11-4-2.
between <- function(x,minimum=0, maximum) {
x[x>minimum&x<=maximum]
}
pizza <- c(A=15, B=8, C=16, D=11, E=15, F=21, G=13, H=15, I=22, J=25)
between(x=pizza, minimum=0, maximum=20)
between(x=pizza, maximum=20) 	# 위와 같다 ( 이유 : 기본값은 0이니까 )
between(x=pizza, minimum=10)	# maximum 지정 안해줘서 실행 안됨
between(pizza,0,20)			# 순서대로 -> OK
between(maximum=20,x=pizza,minimum=0) 	# 이름 지정 O -> 순서 무관
between(20,pizza,0)			# 이름 지정 X -> 순서 지켜야!!
avg <- function(...) {
sum(c(...))/length(c(...))
}
avg(9,8,10,9)
# 11-4-3. Returning Objects
# (1) return (2) cat
se <- function(x) {
y <- sqrt(var(x)/length(x))
}
se(1:4)		# return X -> 지정해준 다음 실행해야!
se <- function(x) {
y <- sqrt(var(x)/length(x))
return(y)
}
se(1:4)		# return O -> 바로 실행됨
func3 <- function(x) {
f1 <- min(x)
f2 <- mediam(x)
f3 <- max(x)
return(list(minimum=f1, median=f2, maximum=f3))
}
func3(c(4,9,1,3,2,5,2,4,7))
f2 <- median(x)
func3 <- function(x) {
f1 <- min(x)
f2 <- median(x)
f3 <- max(x)
return(list(minimum=f1, median=f2, maximum=f3))
}
func3(c(4,9,1,3,2,5,2,4,7))
cat("aaa","bbb")  # 기본적으로 띄어쓰기 O
cat("aaa","bbb",sep='') # 안 띄어씀
cat("aaa","\n","bbb")
cat("aaa","\n","bbb",sep='')
cat("a","b","\t","c","d",sep="-")
R2 <- 0.7853
R2.adj <- 0.7627
cat("R-squared = ", R2, "\n",
"adjusted R-square = ", R2.adj, "\n",sep="")
cat("the alphabet :", letters, "\n", sep=" ")
# 11-4-4. Verifying Arguements
# missing() / stop() / warning() / stopifnot()
myfun <- function(x,y) {
temp <- x==y
return(temp)
}
myfun(x=3)	# missing! y값이 없어
myfun <- function(x,y) {
if(missing(y)){
y <- x
}
temp <- x==y
return(temp)
}
myfun(x=2)	# ㄱㅊ
myfun(x=2,y=3)  # 당근 ㄱㅊ
iter <- 7
if(iter>5) stop("Too many iterations")
warning("data is not matrix form")
stopifnot(1==1, is.character('a'), 1<2)
stopifnot(1==2, is.numeric('a'), 1<2)
mat.func <- function(mat1,mat2) {
if(is.matrix(mat1)==F | is.matrix(mat2)==F) warning("mat1,2 should be matrix")
A <- mat1%*%mat2
return(A)
}
mat.func(mat1=diag(4), mat2=diag(4))
mat.func(mat1=diag(4), mat2=1:4)
setwd("C:\\Users\\samsung\\Desktop\\Bitamin\\Machine Learning with R\\10장")
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors=FALSE)
wbcd <- wbcd[-1]
wbcd$diagnosis <- factor(wbcd$diagnosis, levels=c("B","M"))
normalize <- function(x) { return ((x-min(x)) / (max(x)-min(x))) }
wbcd_n <- as.data.frame(lapply(wbcd[2:31],normalize))
library(class)
library(caret)
library(C50)
library(irr)
set.seed(123)
folds <- createFolds(wbcd$diagnosis, k=10)
cv_results <- lapply(folds, function(x) {
wbcd_n_train <- wbcd_n_[-x,]
wbcd_n_test <- wbcd_n_[x,]  wbcd_train_labels <- wbcd[-x,1]  wbcd_test_labels <-wbcd[x,1]
wbcd_n_model <- knn(train=wbcd_n_train, test=wbcd_n_test, cl=wbcd_train_labels, k=21)
wbcd_n_pred <- predict(wbcd_n_model, wbcd_n_test)
wbcd_n_actual <- wbcd_n_test$diagnosis
kappa <- kappa2(data.frame(wbcd_n_actual, wbcd_n_pred))$value
return(kappa)
})
cv_results <- lapply(folds, function(x) {
wbcd_n_train <- wbcd_n_[-x,]
wbcd_n_test <- wbcd_n_[x,]
wbcd_train_labels <- wbcd[-x,1]
wbcd_test_labels <-wbcd[x,1]
wbcd_n_model <- knn(train=wbcd_n_train, test=wbcd_n_test, cl=wbcd_train_labels, k=21)
wbcd_n_pred <- predict(wbcd_n_model, wbcd_n_test)
wbcd_n_actual <- wbcd_n_test$diagnosis
kappa <- kappa2(data.frame(wbcd_n_actual, wbcd_n_pred))$value
return(kappa)
})
cv_results <- lapply(folds, function(x) {
wbcd_n_train <- wbcd_n[-x,]
wbcd_n_test <- wbcd_n[x,]
wbcd_train_labels <- wbcd[-x,1]
wbcd_test_labels <-wbcd[x,1]
wbcd_n_model <- knn(train=wbcd_n_train, test=wbcd_n_test, cl=wbcd_train_labels, k=21)
wbcd_n_pred <- predict(wbcd_n_model, wbcd_n_test)
wbcd_n_actual <- wbcd_n_test$diagnosis
kappa <- kappa2(data.frame(wbcd_n_actual, wbcd_n_pred))$value
return(kappa)
})
