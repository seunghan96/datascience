setwd('C:\\Users\\samsung\\Desktop\\datascience\\Time_series_analysis')
library(forecast)
library(ggplot2)
library(ggfortify)
## 1) data overview
plot(AirPassengers)
class(AirPassengers)
AP = AirPassengers
start(AP)
end(AP)
frequency(AP)
## 2) graph
par(mfrow=c(3,1))
plot(AP, ylab='Num of Passengers', xlab='Time')
plot(aggregate(AP),ylab='Passengers') # monthly
autoplot(AP,ts.colour='red',ts.linetype='dashed')
# 2. US unemployment
cbe = read.csv('cbe.csv')
boxplot(AP~cycle(AP),ylab='Passengers')
head(cbe)
class(cbe)
beer = ts(cbe[,2],start=1958, frequency=12)
choc = ts(cbe[,1],start=1958, frequency=12)
elec = ts(cbe[,3],start=1958, frequency=12)
plot(cbind(choc,beer,elec), main='Multiple TS Graph')
start(AP.elec)
# 3. Intersection between time series
AP.elec = ts.intersect(AP,elec)
start(AP.elec)
plot(AP.elec[,1], ylab='AirPassengers')
plot(AP.elec[,2], ylab='Electricity')
par(mfrow=c(2,1))
plot(AP.elec[,1], ylab='AirPassengers')
plot(AP.elec[,2], ylab='Electricity')
plot(cbind(AP.elec[,1],AP.elec[,2]))
plot(cbind(AP.elec[,1],AP.elec[,2]), main='Intersection')
## 1) Trend
plot(AP)
abline(AP)
ap.time = time(AP)
ap.time
Reg= lim(AP~Ap.time)
Reg= lm(AP~Ap.time)
abline(Reg)
Reg= lm(AP~Ap.time)
abline(Reg)
## 1) Trend
plot(AP)
ap.time = time(AP)
Reg= lm(AP~ap.time)
abline(Reg)
## 2) TS decomposition
decompose(AP)
plot(decompose(AP))
# 1) original plot
library(forecast)
# 1) original plot
library(forecast)
library(ggplot2)
# 1) original plot
gs = read.csv('gs_ts.csv')
head(gs)
tail(gs)
class(gs)
# 1) original plot
gs_price = ts(gs$price,frequency=250)
gs_price
plot(gs_price, main='Goldman Sachs Stock Price')
ml = filter(gs_price, rep(1/100,100), sides=1) # sides=1 : past
ml
# 2) MA plot
ml = filter(gs_price, rep(1/100,100), sides=1) # sides=1 : past
plot(gs_price, main='Goldman Sachs Stock Price (1000days MA)')
lines(ml,col='red')
# level, trend, seasonality
gs_hw = HoltWinters(gs_price, alpha=0.8, beta=False, gamma=False)
# level, trend, seasonality
gs_hw = HoltWinters(gs_price, alpha=0.8, beta=FALSE, gamma=FALSE)
# level, trend, seasonality
#gs_hw = HoltWinters(gs_price, alpha=0.8, beta=FALSE, gamma=FALSE)
gs_hw = HoltWinters(gs_price, beta=FALSE, gamma=FALSE)
plot(gs_hw, main = 'Exponential Moving Average')
wn = rnorm(1000)
ts.plot(wn)
par(mfrow=c(2,1))
acf(wn)
pacf(wn)
## 2) Random Walk
set.seed(1234)
## 2) Random Walk
set.seed(123)
x = rnorm(1)
w = rnorm(1000)
for (t in 2:1000){
x[t] = x[t-1]+w[t]
}
x
head(x)
head(w)
ts.plot(x)
par(mfrow=c(2,1))
acf(x)
pacf(x)
acf(wn)
pacf(wn)
## 3) Random Walk with Differencing
par(mfrow=c(2,1))
acf(diff(x))
pacf(diff(x))
auto.arima(AirPassengers)
library(forecast)
auto.arima(AirPassengers)
auto.arima(diff(AirPassengers))
## 5) ARIMA
arima(AirPassengers,c(2,1,1),seasonal=list(order=c(0,1,0), period=12))
# 8. ARIMA (3)
library(forecast)
fit = auto.arima(AirPassengers)
fcst = forecast(fit, h=10*12)
plt(fcst)
plot(fcst)
exp(fcst$mean)
ts.plot(AirPassengers,fcst$mean, lty=c(1,3))
attributes(fcst)
setwd('C:\\Users\\samsung\\Desktop\\datascience\\Time_series_analysis')
us = read.csv('USunemp.csv')
head(us)
ts.plot(us)
dim(us)
setwd('C:\\Users\\samsung\\Desktop\\datascience\\Time_series_analysis')
us = read.csv('USunemp.csv')
head(us)
dim(us)
ts.plot(us)
train = us[1:118]
test = us[119:130]
setwd('C:\\Users\\samsung\\Desktop\\datascience\\Time_series_analysis')
us = read.csv('USunemp.csv')
head(us)
dim(us)
ts.plot(us)
# 2. train & test split for Cross-Validation
train1 = us[1:118]
test1 = us[119:130]
train2 = us[1:106]
test2 = us[107:130]
train3 = us[1:94]
test3 = us[95:130]
# 2. train & test split for Cross-Validation
train1 = us$USun[1:118]
test1 = us$USun[119:130]
train2 = us$USun[1:106]
test2 = us$USun[107:130]
train3 = us$USun[1:94]
test3 = us$USun[95:130]
# 3. Modeling
m1 = ts(train1, frequency=12)
m2 = ts(train2, frequency=12)
m3 = ts(train3, frequency=12)
hw1 = hw(m1)
# 4-1. HoltWinters Model
hw1 = hw(m1)
hw2 = hw(m2)
hw3 = hw(m3)
hw1_fc = forecast(hw1,h=12)
hw2_fc = forecast(hw2,h=12)
hw3_fc = forecast(hw3,h=12)
attributes(hw1_fc)
cbind(hw1_fc$mean, m1)
cbind(hw1_fc$mean, test1)
par(mfrow=c(3,1))
plot(hw1_fc)
plot(hw2_fc)
plot(hw3_fc)
100-100*mean(abs(hw1_fc$mean - test1)/test1)
100-100*mean(abs(hw2_fc$mean - test2)/test2)
test1 = us$USun[119:130]
test2 = us$USun[107:118]
test3 = us$USun[95:106]
100-100*mean(abs(hw2_fc$mean - test2)/test2)
100-100*mean(abs(hw3_fc$mean - test3)/test3)
# 4-2. STL Method
stl_1 = stl(m1, s.window='per')
stl_2 = stl(m2, s.window='per')
stl_3 = stl(m3, s.window='per')
stl1_fc = forecast(stl_1, h=12)
stl2_fc = forecast(stl_2, h=12)
stl3_fc = forecast(stl_3, h=12)
attributes(stl1_fc)
cbind(stl1_fc$mean, test1)
par(mfrow=c(3,1))
par(mfrow=c(3,1))
plot(stl1_fc)
plot(stl2_fc)
plot(stl3_fc)
100-100*mean(abs(stl1_fc$mean - test1)/test1)
100-100*mean(abs(stl2_fc$mean - test2)/test2)
100-100*mean(abs(stl3_fc$mean - test3)/test3)
# 4-3. ARIMA
arima_1 = auto.arima(m1)
arima_2 = auto.arima(m2)
arima_3 = auto.arima(m3)
arima1_fc = forecast(arima_1,h=12)
arima2_fc = forecast(arima_2,h=12)
arima3_fc = forecast(arima_3,h=12)
attributes(arima1_fc)
cbind(arima1_fc$mean, test1)
par(mfrow=c(3,1))
plot(arima1_fc)
plot(arima2_fc)
plot(arima3_fc)
100-100*mean(abs(arima1_fc$mean - test1)/test1)
100-100*mean(abs(arima2_fc$mean - test2)/test2)
100-100*mean(abs(arima3_fc$mean - test3)/test3)
